<%- include("../user_partials/header") %>
<style>
  /* Pagination Styles */
  .pagination {
    display: flex;
    justify-content: center;
    /* Center the pagination links */
    align-items: center;
    /* Vertically align the pagination items */
    list-style-type: none;
    /* Remove bullet points */
    padding: 0;
  }

  .pagination .page-item {
    margin: 0 5px;
    /* Space between pagination items */
  }

  .pagination .page-link {
    border-radius: 5px;
    padding: 8px 12px;
    margin: 0;
    border: 1px solid #ddd;
    color: #007bff;
    text-align: center;
  }

  .pagination .page-item.active .page-link {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
  }

  .pagination .page-link:hover {
    background-color: #e9ecef;
    border-color: #007bff;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    /* Collapse borders into a single border */
    margin-top: 20px;
    /* Add some space above the table */
  }

  th,
  td {
    border: 1px solid #ddd;
    /* Add a border to table cells */
    padding: 12px;
    /* Add some padding inside cells */
    text-align: left;
    /* Align text to the left */
  }

  th {
    background-color: #f4f4f4;
    /* Add a light background color to the header */
  }

  tr:nth-child(even) {
    background-color: #f9f9f9;
    /* Add a light background color to even rows */
  }

  .actions {
    text-align: center;
    /* Center align the actions column */
  }
</style>
<!-- account-mobile -->
<div class="themevale_Mobile themevale_MobileAccount" id="account-mobile">
  <div class="themevale_close2">
    <a href="javascript:void(0)" class="close">&times;<span class="text">close</span></a>
  </div>
  <div id="accountMobile">
    <nav class="navPages-mobile">
      <ul class="navPages-list navPages-list--user">
        <li class="navPages-item">
          <p class="navPage-subMenu-title">
            <span class="text">Account</span>
          </p>
        </li>
        <li class="navPages-item">
          <a class="navPage-subMenu-action navPages-action" href="/account"><span class="text">Account</span></a>
        </li>
        <li class="navPages-item">
          <a class="navPage-subMenu-action navPages-action" href="/address"><span class="text">Addresses</span></a>
        </li>
        <li class="navPages-item">
          <a class="navPage-subMenu-action navPages-action" href="/orders"><span class="text">Orders</span></a>
        </li>
        <li class="navPages-item">
          <a class="navPage-subMenu-action navPages-action" href="/wishlist"><span class="text">Wish Lists</span></a>
        </li>
        <li class="navPages-item">
          <a class="navPage-subMenu-action navPages-action" href="/wallet"><span class="text">Wallet</span></a>
        </li>
        <li class="navPages-item">
          <a class="navPage-subMenu-action navPages-action" href="/signOut"><span class="text">Log out</span></a>
        </li>
      </ul>
    </nav>
  </div>
</div>
<!-- account-mobile -->
<div class="body" data-currency-code="USD">

  <main class="page account-order-all account">
    <ul class="breadcrumbs" itemscope itemtype="http://schema.org/BreadcrumbList">
      <li class="breadcrumb " itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
        <a href="/home" class="breadcrumb-label" itemprop="item"><span itemprop="name">Home</span></a>
        <meta itemprop="position" content="1" />
      </li>
      <li class="breadcrumb " itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
        <a href="/account" class="breadcrumb-label" itemprop="item"><span itemprop="name">Your Account</span></a>
        <meta itemprop="position" content="2" />
      </li>
      <li class="breadcrumb is-active" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
        <meta itemprop="item" content="https://luxwatches-demo-02.mybigcommerce.com/account.php?action=order_status">
        <span class="breadcrumb-label" itemprop="name">Your Orders</span>
        <meta itemprop="position" content="3" />
      </li>
    </ul>
    <div class="container container-smaller">
      <div class="page-content">
        <div class="themevale-heading">
          <h1 class="page-heading">Your Orders</h1>
        </div>

        <nav class="navBar navBar--sub navBar--account">
          <ul class="navBar-section">
            <li class="navBar-item">
              <a class="navBar-action" href="/account">Account</a>
            </li>
            <li class="navBar-item ">
              <a class="navBar-action" href="/address">Addresses</a>
            </li>
            <li class="navBar-item is-active">Orders</li>
            <li class="navBar-item">
              <a class="navBar-action" href="/wishlist">Wish Lists</a>
            </li>
            <li class="navBar-item">
              <a class="navBar-action" href="/wallet">Wallet</a>
            </li>
          </ul>
        </nav>

        <% if (order.length === 0) { %>
        <h1 class="page-heading" data-cart-page-title> You Nothing Orederd Yet</h1>
        <% } else{ %>
        <table>
          <thead>
            <tr>
              <th class="text-center">S.No</th>
              <th class="text-center">Date</th>
              <th class="text-center">Payment Method</th>
              <th class="text-center">Order Total</th>
              <th class="text-center">Status</th>
              <th class="text-center">Actions</th>
            </tr>
          </thead>
          <tbody>
            <%  let SNo=1 %>
            <% order.forEach(order => { %>
            <tr>
              <td class="text-center"><%=  SNo++ %> </td>
              <td class="text-center"><%= (order.createdAt).toDateString() %></td>
              <td class="text-center"><%= order.paymentMethod %></td>
              <td class="text-center"><%= order.orderTotal %></td>
              <td class="text-center"><span class="badge rounded-pill alert-warning"><%= order?.status %></td>
              <td class="actions">
                <a class="btn btn-secondary" href="/orderDetails/<%= order._id %>">Details</a>

                <% if (order.status === 'Order confirmed') { %>
                <button type="button" class="btn btn-sm btn-outline-danger" onclick="cancelOrder('<%= order._id %>')">Cancel</button>
                <% } else if (order.status === 'Delivered') { %>
                <button type="button" class="btn btn-sm btn-outline-warning" onclick="returnOrder('<%= order._id %>')">Return</button>
                <% } %>
              </td>
            </tr>
            <%  }) %>

          </tbody>
        </table>
        <% }%>

      </div>
    </div>
    <!-- Pagination -->
    <div class="row">
      <div class="col-12">
        <nav aria-label="Page navigation example">
          <ul class="pagination justify-content-center">
            <% if (currentPage > 1) { %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
            </li>
            <% } %>
            <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= i %>"><%= i %></a>
            </li>
            <% } %>
            <% if (currentPage < totalPages) { %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
            </li>
            <% } %>
          </ul>
        </nav>
      </div>
    </div>
  </main>

  <div id="modal" class="modal" data-reveal data-prevent-quick-search-close>
    <a href="#" class="modal-close" aria-label="Close" role="button">
      <span aria-hidden="true">&#215;</span>
    </a>
    <div class="modal-content"></div>
    <div class="loadingOverlay"></div>
  </div>
  <div id="alert-modal" class="modal modal--alert modal--small" data-reveal data-prevent-quick-search-close>
    <div class="swal2-icon swal2-error swal2-animate-error-icon"><span class="swal2-x-mark swal2-animate-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span></div>

    <div class="modal-content"></div>

    <div class="button-container"><button type="button" class="confirm button" data-reveal-close>OK</button></div>
  </div>
</div>
<script>
  // Script to update the order status display
  document.addEventListener("DOMContentLoaded", function() {
    const statuses = document.querySelectorAll('.status');

    statuses.forEach((statusElement) => {
      const status = statusElement.getAttribute('data-status');
      let iconHTML = '<i class="fa-solid fa-circle-dot"></i> ';

      switch (status) {
        case 'order confirmed':
          statusElement.innerHTML = iconHTML + 'On Delivery';
          statusElement.style.color = 'blue';
          break;
        case 'cancelled':
          statusElement.innerHTML = iconHTML + 'Order Cancelled';
          statusElement.style.color = 'red';
          break;
        case 'delivered':
        case 'completed':
          statusElement.innerHTML = iconHTML + 'Product Delivered';
          statusElement.style.color = 'green';
          break;
        case 'returned':
          statusElement.innerHTML = iconHTML + 'The Product Returned';
          statusElement.style.color = 'red';
          break;
        case 'Requested for Return':
          statusElement.innerHTML = iconHTML + 'Requested for Return';
          statusElement.style.color = 'red';
          break;
        case 'pending':
          statusElement.innerHTML = iconHTML + 'Payment Incomplete';
          statusElement.style.color = 'red';
          break;
      }
    });
  });

  // Cancel order function
  function cancelOrder(orderId) {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, Cancel Order",
      cancelButtonText: "No, cancel!",
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/cancelOrder?orderId=${orderId}`, {
            method: 'GET'
          })
          .then(response => {
            if (response.ok) {
              Swal.fire({
                title: "Order Cancelled",
                text: "The Order has been Cancelled.",
                icon: "success"
              }).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire({
                title: "Error",
                text: "An error occurred while Cancelling Order.",
                icon: "error"
              });
            }
          })
          .catch(error => {
            console.log("Error:", error);
            Swal.fire({
              title: "Error",
              text: "An error occurred while Cancelling Order.",
              icon: "error"
            });
          });
      }
    });
  }

  // Return order function
  function returnOrder(orderId) {
    Swal.fire({
      title: 'Return Order',
      input: 'textarea',
      inputPlaceholder: 'Type your reason here...',
      inputAttributes: {
        'aria-label': 'Type your reason here'
      },
      showCancelButton: true,
      confirmButtonText: 'Submit',
      cancelButtonText: 'Cancel',
      inputValidator: (value) => {
        if (!value) {
          return 'You need to write something!';
        }
      }
    }).then((result) => {
      if (result.isConfirmed && result.value) {
        fetch('/returnOrder', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              orderId: orderId,
              reason: result.value
            })
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            Swal.fire('Submitted!', 'Your return request has been submitted.', 'success').then(() => {
              window.location.reload();
            });
          })
          .catch(error => {
            console.log('Error returning the order:', error);
            Swal.fire('Failed!', 'Your return request could not be processed.', 'error');
          });
      }
    });
  }

  // Continue order function
  document.addEventListener("DOMContentLoaded", function() {
    var payAgainButtons = document.querySelectorAll('.payAgainButton');
    payAgainButtons.forEach(function(button) {
      button.addEventListener('click', function() {
        var orderId = this.getAttribute('data-order-id');
        initiatePayment(orderId);
      });
    });
  });

  function initiatePayment(orderId) {
    fetch('/getPaymentDetails', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderId: orderId
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          openRazorpay(data);
        } else {
          Swal.fire('Error', 'Failed to fetch payment details', 'error');
        }
      })
      .catch(error => {
        console.log('Error:', error);
        Swal.fire('Error', 'Network Error. Try again.', 'error');
      });
  }

  function openRazorpay(data) {
    var options = {
      "key": data.key_id,
      "amount": data.amount,
      "currency": data.currency,
      "name": "Coza Store",
      "description": "Test Transaction",
      "image": "https://example.com/your_logo",
      "order_id": data.razorpayOrderId,
      "handler": function(response) {
        verifyPayment(response.razorpay_payment_id, response.razorpay_order_id, response.razorpay_signature, data.orderId);
      },
      "prefill": {
        "name": "Coza Srore",
        "email": "youremail@example.com",
        "contact": "9999999999"
      },
      "notes": {
        "address": "Your Address"
      },
      "theme": {
        "color": "#3399cc"
      }
    };
    var rzp1 = new Razorpay(options);
    rzp1.open();
  }

  function verifyPayment(paymentId, orderId, signature, orderDbId) {
    fetch('/verifyPayment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          paymentId: paymentId,
          razorpayOrderId: orderId,
          razorpaySignature: signature,
          orderId: orderDbId
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: "Payment Successful",
            text: "Your payment has been successfully processed.",
            icon: "success"
          }).then(() => {
            window.location.href = `/orderDetails?orderId=${orderDbId}`;
          });
        } else {
          Swal.fire('Error', 'Payment verification failed. Please try again.', 'error');
        }
      })
      .catch(error => {
        console.log('Error:', error);
        Swal.fire('Error', 'Network Error. Try again.', 'error');
      });
  }
</script>
<%- include("../user_partials/footer") %>