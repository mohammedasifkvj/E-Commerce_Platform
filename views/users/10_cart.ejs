<%- include("../user_partials/header") %>
<style>
    .error-message{
       color: red;
       font-size: 12px;
    }
</style>

<div class="body" data-currency-code="USD">
     
    <div class="page">
    <div class="container container-smaller">
        <!-- breadcrumbs -->
        <ul class="breadcrumbs" itemscope itemtype="http://schema.org/BreadcrumbList">
            <li class="breadcrumb " itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                    <a href="/home" class="breadcrumb-label" itemprop="item"><span itemprop="name">Home</span></a>
                <meta itemprop="position" content="1" />
            </li>
            <li class="breadcrumb is-active" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                   <meta itemprop="item" > <!--  content="https://luxwatches-demo-02.mybigcommerce.com/cart.php" -->
                    <span class="breadcrumb-label" itemprop="name">Your Cart</span>
                <meta itemprop="position" content="2" />
            </li>
        </ul>
        <main class="page-content" data-cart><% if (cartItems?.length === 0) { %>
            <h1 class="page-heading" data-cart-page-title> Your Cart is Empty</h1>
        <% } else{ %>
            <h1 class="page-heading" data-cart-page-title> Your Cart</h1>
            <div data-cart-status></div>

                <div class="loadingOverlay"></div>

                <div data-cart-content>
                    <table class="cart" data-cart-quantity="2">
    <thead class="cart-header">
        <tr>
            <th class="cart-header-item text-left" colspan="2">Item</th>
            <th class="cart-header-item text-center">Price</th>
            <th class="cart-header-item cart-header-quantity text-center">Quantity</th>
            <th class="cart-header-item text-center">Total</th>
        </tr>
    </thead>
    <tbody id="cart-table-body" class="cart-list">
            <% cartItems?.forEach(item => { %>
            <tr data-product-id="<%= item.productId._id %>" class="cart-item" data-item-row>
                <td class="cart-item-block cart-item-figure ">
                    <img src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" title="<%= item.productId.productName %>" data-sizes="auto"class="cart-item-image"/>
                </td>
                <td class="cart-item-block cart-item-title ">
                    <p class="cart-item-brand"><b><%= item.productId.brand %></b></p>
                    <h4 class="cart-item-name"><a href="#"><%= item.productId.productName %></a></h4>
                        <dl class="definitionList">
                        </dl>
    
        </td>
                <td class="cart-item-block cart-item-info cart-item-price">
                    <span class="cart-item-label">Price:</span>
                        <span class="cart-item-value "><%=item.productId?.discountPrice %></span>
                </td>
                <!--onclick="decreaseQuantity('<%= item.productId._id %>')" -->
                <!-- onclick="increaseQuantity('<%= item.productId._id %>')" -->

                <td id="quantity" class="cart-item-block cart-item-info cart-item-quantity form-field--increments ">
                    <label class="form-label cart-item-label" for="qty-<%= item?.productId._id %>">Quantity:</label>
                    <div class="form-increment">
                        <button class="button--icon decrease-btn" data-product-id="<%= item.productId._id %>" data-action="dec">
                            <span class="is-srOnly">Decrease Quantity:</span>
                        </button>
                        <input class="form-input form-input--incrementTotal cart-item-qty-input"
                               id="qty-<%= item.productId._id %>"
                               name="qty-<%= item.productId._id %>"
                               type="tel"
                               value="<%= item.quantity %>"
                               min="1"
                               max="5"
                               pattern="[0-9]*"
                               data-product-id="<%= item.productId._id %>"
                               aria-live="polite">
                        <button class="button--icon increase-btn" data-product-id="<%= item.productId._id %>" data-action="inc">
                            <span class="is-srOnly">Increase Quantity:</span>
                        </button>
                    </div>
                </td>
                <td id="total" class=" cart-item-block cart-item-info cart-item-price ">
                    <span class="cart-item-label">Total:</span>
                
         <!--   --><span id="total-<%= item.productId._id %>" class="cart-item-value total">
    <%= item.quantity * item.productId.discountPrice %>
</span>
                        <a type="button" onclick="deleteProduct('<%= item.productId._id %>')"  class="cart-remove icon" data-cart-itemid="02e3b9c1-7767-4c7c-973d-5a6ac01a5f9d" data-confirm-delete="Are you sure you want to delete this item?">
                            <svg><use xlink:href="#icon-close"></use></svg>
                        </a>
                </td>
            </tr>
            <%  } ) %>
    </tbody>  
</table>
<% if (cartItems.length != 0) { %>
                <div class="cart-actions-group">
                    <div class="cart-actions">
                        <div class="cart-empty" data-cart-empty>
                            <button class="button" id="emptyCart" data-confirm="Are you sure you want to delete this item?" onclick="clearCart()">Clear Shopping Cart</button>
                        </div>
                        <!-- https://luxwatches-demo-02.mybigcommerce.com/ -->
                        <a class="button btn-continue" href="/home" title="Continue shopping">Continue shopping</a>
                    </div>
                </div>
             </div>   

                <div data-cart-totals>
                    <div class="cart-totals">
    
    <div class="right-column column">
        <div class="cart-total">
            <div class="cart-total-header">
                <div class="cart-total-label">
                    Cart Summary:
                </div>
            </div>
        </div>
        <div class="cart-total subtotal">
            <div class="cart-total-label">Subtotal:</div>
            <div class="cart-total-value">
                <span id="subtotal-value"><%= cartItems.reduce((total, item) => total + (item.quantity * item.productId.discountPrice), 0) %></span>
            </div>
        </div>

            <div class="cart-actions">
                <a class="button button--checkout" id="checkoutButton" href="/checkout" title="Click here to proceed to checkout">Proceed To Checkout</a>
            </div>

            <div class="secure">
    <div class="text-group">
        <div class="icon">
            <svg class="icon"><use xlink:href="#icon-secure"></use></svg>
        </div>
        <div class="text">
            <p>Secure Shopping Guarantee. Your information is secure.</p>
        </div>
    </div>

</div>
    </div>
</div>
                </div>
                    <div class="cart-seal-logos">
	<img src="https://cdn11.bigcommerce.com/s-2nfdiyehvz/stencil/558781b0-6ef6-013b-f567-4afeb0a3a797/e/960150f0-c5aa-0139-ef11-066281ecf407/img/master-card-secure.png" alt="Master Card Secure">
	<img src="https://cdn11.bigcommerce.com/s-2nfdiyehvz/stencil/558781b0-6ef6-013b-f567-4afeb0a3a797/e/960150f0-c5aa-0139-ef11-066281ecf407/img/visa-verify.png" alt="Visa Verify">
	<img src="https://cdn11.bigcommerce.com/s-2nfdiyehvz/stencil/558781b0-6ef6-013b-f567-4afeb0a3a797/e/960150f0-c5aa-0139-ef11-066281ecf407/img/norton.png" alt="Norton">
	<img src="https://cdn11.bigcommerce.com/s-2nfdiyehvz/stencil/558781b0-6ef6-013b-f567-4afeb0a3a797/e/960150f0-c5aa-0139-ef11-066281ecf407/img/etrust.png" alt="Etrust">
	<img src="https://cdn11.bigcommerce.com/s-2nfdiyehvz/stencil/558781b0-6ef6-013b-f567-4afeb0a3a797/e/960150f0-c5aa-0139-ef11-066281ecf407/img/authorized-net.png" alt="Authorized.net">
	<img src="https://cdn11.bigcommerce.com/s-2nfdiyehvz/stencil/558781b0-6ef6-013b-f567-4afeb0a3a797/e/960150f0-c5aa-0139-ef11-066281ecf407/img/accredited-business.png" alt="Accredited Business">
</div>

        </main>
    </div>
</div>

    <div id="modal" class="modal" data-reveal data-prevent-quick-search-close>
    <a href="#" class="modal-close" aria-label="Close" role="button">
        <span aria-hidden="true">&#215;</span>
    </a>
    <div class="modal-content"></div>
    <div class="loadingOverlay"></div>
</div>
    <div id="alert-modal" class="modal modal--alert modal--small" data-reveal data-prevent-quick-search-close>
    <div class="swal2-icon swal2-error swal2-animate-error-icon"><span class="swal2-x-mark swal2-animate-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span></div>

    <div class="modal-content"></div>

    <div class="button-container"><button type="button" class="confirm button" data-reveal-close>OK</button></div>
</div>
</div>
<% } } %>

 <script>
 //Increase and decrease quantity
document.querySelectorAll('.increase-btn, .decrease-btn').forEach(button => {
        button.addEventListener('click', async function (e) {
            const productId = this.getAttribute('data-product-id');
            const inputField = document.getElementById(`qty-${productId}`);
            let currentQuantity = parseInt(inputField.value);
            const action = this.getAttribute('data-action');

            // Determine new quantity
            let newQuantity = action === 'inc' ? currentQuantity + 1 : currentQuantity - 1;

            // Check frontend limits
            if (newQuantity > 5) {
                Swal.fire({
                  icon: "warning",
                  title: "Maximum quantity reached",
                  text: "You can't add more than 5 units of any product",
                  showConfirmButton: false,
                  timer:1000
                });
                return;
            }

            if ( newQuantity < 1 ) {
                Swal.fire({
                    icon: "warning",
                    title: "Minimum quantity reached",
                    text: "You can't have less than one of this product",
                    showConfirmButton: false,
                    timer:1000
                });
                return;
            }

        try {
            const response = await axios.post('/cart/changeQuantity', {
                productId: productId,
                quantity: newQuantity
            });

            inputField.value = response.data.newQuantity;

            // Update cart subtotal
            document.getElementById('subtotal-value').innerText = response.data.newTotal;

            // Update the product total using the correct ID Now it is commented
             document.getElementById(`total-${productId}`).innerText = response.data.productTotal;
        } catch (error) {
    if (error.response) {
        const { status, data } = error.response;

        if (status === 400 ) {
            Swal.fire({
                icon: "error",
                title: "Insufficiant Stock",
                text: data.message,
                showConfirmButton: false,
                timer: 1000
            });
        }else if (status === 401 || status === 402 || status === 403) {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message,
                showConfirmButton: false,
                timer: 1000
            });
        }
    } else {
        Swal.fire({
            icon: "error",
            title: "An unexpected error occurred",
            showConfirmButton: false,
            timer: 1000
        });
    }}
    });
});
</script>

<script>
    //Delete single element from the cart and Clear the Cart
 async function deleteProduct(productId) {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!'
    });

    if (result.isConfirmed) {
        const response = await fetch('/deleteProduct', {
            method: "DELETE",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId })
        });

        const result = await response.json();

        if (response.status === 200) {
            (() => {
                     location.reload(); // Reload the page to update the cart
                })()

        } else {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: result.error || "An error occurred",
                showConfirmButton: true
            });
        }
    }
}

// Clear the cart
async function clearCart() {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: "This will remove all items from your cart!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, clear it!'
    });

    if (result.isConfirmed) {
        const response = await fetch('/clearCart', {
            method: "DELETE",
            headers: {
                'Content-Type': 'application/json'
            }
        });

     const result = await response.json();

        if (response.status === 200) {
            // updateCartUI([]);
            (() => {
                     location.reload(); // Reload the page to update the cart
                })()

        } else {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: result.error || "An error occurred",
                showConfirmButton: true
            });
        }
    }
}
</script>

<script>
//stock checking before checkout 
    document.getElementById('checkoutButton').addEventListener('click', async (e) => {
        e.preventDefault(); // Prevent default action
        
        // Get cart items
        const cartItems = [];
        document.querySelectorAll('.cart-item').forEach(itemRow => {
            const productId = itemRow.getAttribute('data-product-id');
            const quantity = itemRow.querySelector('.cart-item-qty-input').value;
            cartItems.push({ productId, quantity: parseInt(quantity) });
        });

        try {
            // Make axios POST request to check stock
            const response = await axios.post('/stockCheck', { cartItems });

            if (response.data.success) {
                // If stock is available, redirect to the checkout page
                window.location.href = "/checkout";
            } else {
                // Display SweetAlert for out of stock items
                const outOfStockProducts = response.data.outOfStockProducts;
                let productList = outOfStockProducts.map(product => `${product.productName} (Available: ${product.available}, In Cart: ${product.inCart})`).join('<br>');

                Swal.fire({
                    icon: 'error',
                    title: 'Out of Stock,Reduce it',
                    html: `Some products are out of stock:<br><b>Please Reduce the quantity of the following</b></p>
                    <ul><b>${productList}</b></ul>`,
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            console.error('Error checking stock:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while checking stock. Please try again later.',
                confirmButtonText: 'OK'
            });
        }
    });
</script>

<script>
    async function increaseQuantity(productId) {
        const response = await fetch('/increaseQty', {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId })
        });

        const result = await response.json();

        if (response.status === 200) {
            Swal.fire({
                    icon: "success",
                    title: "Product quantity increased",
                    showConfirmButton: false,
                    timer:1000
                 }).then(() => {
                     location.reload(); // Reload the page to update the cart
                });
                
                

        } else if (response.status === 400 && result.message === 'Maximum quantity reached') {
            Swal.fire({
                icon: "warning",
                title: "Maximum quantity reached",
                text: "You can't add more than 5 units of this product",
                showConfirmButton: true
            });
        } else if (response.status === 401) {
            Swal.fire({
                icon: "warning",
                title: "You are not logged in",
                text: "Please log in to update your cart",
                showConfirmButton: true
            });
        } else if (response.status === 404) {
            Swal.fire({
                icon: "error",
                title: "Product not found",
                text: "This product is not in your cart",
                showConfirmButton: true
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: result.error || "An error occurred",
                showConfirmButton: true
            });
        }
    }

// Decrease quantity 
async function decreaseQuantity(productId) {
            const response = await fetch('/decreaseQty', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })
            });

            const result = await response.json();

            if (response.status === 200) {
                // // Update the cart UI dynamically
                // updateCartUI(result.cartItems);
                Swal.fire({
                    icon: "success",
                    title: "Product quantity decreased",
                    showConfirmButton: false,
                    timer:1000
                 }).then(() => {
                     location.reload(); // Reload the page to update the cart
                });
            } else if (response.status === 400 && result.message === 'Minimum quantity reached') {
                Swal.fire({
                    icon: "warning",
                    title: "Minimum quantity reached",
                    text: "You can't have less than one of this product",
                    showConfirmButton: true
                });
            } else if (response.status === 401) {
                Swal.fire({
                    icon: "warning",
                    title: "You are not logged in",
                    text: "Please log in to update your cart",
                    showConfirmButton: true
                });
            } else if (response.status === 404) {
                Swal.fire({
                    icon: "error",
                    title: "Product not found",
                    text: "This product is not in your cart",
                    showConfirmButton: true
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: result.error || "An error occurred",
                    showConfirmButton: true
                });
            }
        }

        function updateCartUI(cartItems) {
            // Assuming you have an element with id "cart-table-body" for the cart items
            const cartTableBody = document.getElementById('cart-table-body');
            cartTableBody.innerHTML = ''; // Clear the current content

            cartItems.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><img src="${item.productId.productImage[0]}" alt="${item.productId.productName}"></td>
                    <td>${item.productId.productName}</td>
                    <td>${item.productId.discontPrice}</td>
                    <td>${item.quantity}</td>
                    <td>${item.quantity * item.productId.discountPrice}</td>
                    <td>
                        <button class="button--icon" data-cart-update data-cart-itemid="02e3b9c1-7767-4c7c-973d-5a6ac01a5f9d" data-action="dec"
                            onclick="decreaseQuantity('${item.productId._id}')">
                                <span class="is-srOnly">Decrease Quantity:</span>
                            </button>
                        <button class="button--icon" data-cart-update data-cart-itemid="02e3b9c1-7767-4c7c-973d-5a6ac01a5f9d" data-action="inc"
                            onclick="increaseQuantity('${item.productId._id}')">
                                <span class="is-srOnly">Increase Quantity:</span>
                            </button>
                    </td>
                `;
                cartTableBody.appendChild(row);
            });

            // Update the total price
            const totalPrice = cartItems.reduce((total, item) => total + (item.quantity * item.productId.discontPrice), 0);
            document.getElementById('total-price').innerText = `Total: ${totalPrice}`;
        }

</script>

<%- include("../user_partials/footer") %>