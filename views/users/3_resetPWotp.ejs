<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Confirmation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
        }
        .breadcrumbs {
    margin: 20px 0;
    font-size: 16px;
    }

    .breadcrumbs a {
    text-decoration: none;
    color: #040d16;
     }

    .breadcrumbs a:hover {
    text-decoration: underline;
    }

    .breadcrumbs span {
    color: #6c757d;
    }
        .otp-container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        .otp-container h2 {
            margin-bottom: 20px;
            color: #333;
        }
        .otp-inputs {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .otp-inputs input {
            width: 140px;
            height: 40px;
            text-align: center;
            font-size: 20px;
            margin: 0 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        .otp-inputs input:focus {
            border-color: #050505e3;
        }
        .timer {
            margin-bottom: 20px;
            color: #555;
        }
        button {
            background-color: #00c3ff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        button + button {
            margin-top: 10px;
            background-color: #6c757d;
        }
        /* Smooth transition effect */
      .alert {
    transition: opacity 1s ease-out;
     }
     /* Class to hide the error message */
      .hidden {
    opacity: 0;
    }
    </style>
</head>
<body>


    
    <div class="otp-container">
        <nav class="breadcrumbs">
            <a href="/home">Home</a><meta itemprop="position" content="1" /> &gt;
            <a href="/forgetPW">Reset Password</a> <meta itemprop="position" content="2" /> &gt;
            <span>OTP</span><meta itemprop="position" content="3" />
        </nav>

        <h2>OTP Confirmation</h2>
        <% if (error) { %>
            <div class=" text-center font-regular p-2 alert alert-danger "class="popup" style=" border-radius: 10px; font-size: 18px; width: 100% ; background-color: rgb(248, 151, 151); color: darkred;display: flex; display: flex; align-items: center; justify-content: center;"><%= error %></div>  
          <% } %>
          <% if (success) { %>
            <div class=" text-center font-regular p-2 alert alert-danger" class="popup" style=" border-radius: 10px; font-size: 18px; width: 100% ; background-color: rgb(247, 244, 244); color: darkgreen;display: flex; display: flex; align-items: center; justify-content: center;" ><%= success %></div>  
          <% } %>
        <form action="/verifyResetOTP" method="post" id="otp-form">
            <div class="otp-inputs">
                <input type="text" name="otp" maxlength="6" id="otp1" name="otp1" required >
                
            </div>
            <div class="timer" id="timer">Resend OTP in: 1:00</div>
            <button type="submit" id="verify-button">Verify OTP</button>
        </form>
        <br>
        <button id="resend-otp" disabled>Resend OTP</button>
    </div>

    <script>

        document.addEventListener("DOMContentLoaded", () => {
    const errorMessage = document.getElementById("popup");

    // Set a timeout to hide the error message after 5 seconds
    setTimeout(() => {
        errorMessage.classList.add("hidden");
    }, 3000); // 5000 milliseconds = 5 seconds
    });
           
        document.addEventListener('DOMContentLoaded', (event) => {
            const inputs = document.querySelectorAll('.otp-inputs input');
            const timerElement = document.getElementById('timer');
            const resendButton = document.getElementById('resend-otp');
            const verifyButton = document.getElementById('verify-button');

            // Move to next input on input
            inputs.forEach((input, index) => {
                input.addEventListener('input', (e) => {
                    if (e.inputType === 'insertText' && /\d/.test(e.data)) {
                        if (index < inputs.length - 1) {
                            inputs[index + 1].focus();
                        }
                    }
                });

                // Move to previous input on backspace
                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Backspace' && input.value === '' && index > 0) {
                        inputs[index - 1].focus();
                    }
                });

                // Paste handling
                input.addEventListener('paste', (e) => {
                    e.preventDefault();
                    const paste = (e.clipboardData || window.clipboardData).getData('text');
                    const pasteArray = paste.split('').filter((char) => /\d/.test(char)).slice(0, inputs.length);
                    pasteArray.forEach((char, i) => {
                        inputs[i].value = char;
                    });
                    inputs[pasteArray.length - 1].focus();
                });
            });

            // Timer, time in seconds
            let timeLeft = 60;
            const timerInterval = setInterval(() => {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    timerElement.textContent = "OTP is expired!";
                    resendButton.disabled = false;
                    verifyButton.disabled = true;
                } else {
                    let minutes = Math.floor(timeLeft / 60);
                    let seconds = timeLeft % 60;
                    timerElement.textContent = `Resend OTP in: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                    timeLeft--;
                }
            }, 1000);

            // Resend OTP
            resendButton.addEventListener('click', () => {
                //alert('OTP Resent');
                timeLeft = 60;
                resendButton.disabled = true;
                verifyButton.disabled = false;
                clearInterval(timerInterval);
                const newTimerInterval = setInterval(() => {
                    if (timeLeft <= 0) {
                        clearInterval(newTimerInterval);
                        timerElement.textContent = "OTP is expired!";
                        resendButton.disabled = false;
                        verifyButton.disabled = true;

                    } else {
                        let minutes = Math.floor(timeLeft / 60);
                        let seconds = timeLeft % 60;
                        timerElement.textContent = `Time Remaining: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                        timeLeft--;
                    }
                }, 1000);
            });

            // Form submission validation
            verifyButton.addEventListener('click', (e) => {
                const otp = Array.from(inputs).map(input => input.value).join('');
                if (otp.length !== 6 || !/^\d{6}$/.test(otp)) {
                    e.preventDefault();
                    // alert('Please enter a valid 6-digit OTP.');
                }
            });
        });

        // Prevent non-numeric input
        inputs.forEach(input => {
                input.addEventListener('keydown', (e) => {
                    if ((e.key < '0' || e.key > '9') && e.key !== 'Backspace') {
                        e.preventDefault();
                    }
                });
            });

    //     // Prevent non-numeric input
    // inputs.forEach(input => {
    //   input.addEventListener('keydown', (e) => {
    //     if ((e.key < '0' || e.key > '9') && e.key !== 'Backspace') {
    //       e.preventDefault();
    //     }
    //   });
    // });
    </script>
</body>
</html>
