<%- include("../user_partials/header") %>
<style>
  .error-message {
    color: red;
    font-size: 12px;
  }
</style>
<div class="body" data-currency-code="USD">
  <main class="page account-order-details account">
    <ul class="breadcrumbs" itemscope itemtype="http://schema.org/BreadcrumbList">
      <li class="breadcrumb" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
        <a href="/home" class="breadcrumb-label" itemprop="item"><span itemprop="name">Home</span></a>
        <meta itemprop="position" content="1" />
      </li>
      <li class="breadcrumb" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
        <a href="/cart" class="breadcrumb-label" itemprop="item"><span itemprop="name">Cart</span></a>
        <meta itemprop="position" content="2" />
      </li>
      <li class="breadcrumb is-active" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
        <meta itemprop="item" content="https://luxwatches-demo-02.mybigcommerce.com/account.php?action=view_order&amp;order_id=107">
        <span class="breadcrumb-label" itemprop="name">Checkout</span>
        <meta itemprop="position" content="3" />
      </li>
    </ul>
    <div class="container container-smaller">
      <div class="page-content">
        <div class="themevale-heading">
          <h1 class="page-heading title">CheckOut</h1>
        </div>
        <% if (cartItems?.length > 0) { %>
        <div class="account">
          <div class="account-body">
            <div class="account-content account-content--fixedSmall">
              <h3 class="account-heading">Cart Contents</h3>
              <div class="row">
                <div>
                  <h3>Item</h3>
                </div>
              </div>

              <form id="makeOrder" action="/makeOrder" method="post">

                <ul class="account-list">
                  <% cartItems?.forEach(item => { %>
                  <li class="account-listItem">
                    <div class="account-product account-product--alignMiddle">
                      <div class="account-product-checkItem">
                        <label for="account-product-id-15" class="form-label">
                          <span class="is-srOnly">Checkbox 15 label</span>
                        </label>
                      </div>

                      <figure class="account-product-figure">
                        <img src="<%= item.productId.productImage[0] %>" alt="" title="<%=item.productId.productName %>" data-sizes="auto" />

                        <input id="id" type="hidden" name="productId[]" value="<%= item.productId._id %>">
                        <input id="quantity" type="hidden" name="quantity[]" value="<%= item.quantity %>">
                      </figure>
                      <div class="account-product-body">
                        <span class="account-product-price"><%= item?.quantity * item?.productId?.discountPrice %></span>
                        <h5 class="account-product-title"><%= item?.quantity %> &#215; <%= item?.productId?.productName %></h5>
                        <dl class="definitionList">

                        </dl>
                      </div>
                    </div>
                  </li>
                  <% })  %>
                </ul>

                <dl class="account-orderTotal">
                  <dt class="account-orderTotal-key">Subtotal:</dt>
                  <dd class="account-orderTotal-value">
                    <%= cartItems?.reduce((total, item) => total + (item.quantity * item.productId.discountPrice), 0) %>
                  </dd>
                  <dt class="account-orderTotal-key">Discount:</dt>
                  <dd id="discount-value" class="account-orderTotal-value">
                    0
                  </dd>
                  <dt class="account-orderTotal-key">Grand total:</dt>
                  <dd id="grand-total-value" class="account-orderTotal-value">
                    <%= cartItems?.reduce((total, item) => total + (item.quantity * item.productId.discountPrice), 0) %>
                  </dd>
                </dl>
            </div>

            <aside class="account-sidebar">
              <section class="account-sidebar-block">
                <% if(address?.length==0){ %>
                <h3 class="account-heading">Add An Address To Place Order </h3>
                <div class="error-message" id="addressError1"></div>
                <a class="button button--primary button--small" href="/addAddress">
                  Add Address
                </a>
                <% } else { %>
                <h3 class="account-heading">Select An Address To Ship </h3>
                <div class="error-message" id="addressError"></div>
                <ul class="account-order-address">
                  <% address?.forEach((addr, index) => { %>
                  <input id="address" type="radio" name="addressId" value="<%= addr._id %>">
                  <!--<%=index===0 ?'checked':'' %> -->
                  <!-- <li><%= addr.name %></li> -->
                  <li><%= addr?.houseName %></li>
                  <li><%= addr?.landmark %></li>
                  <li><%= addr?.city %></li>
                  <li><%= addr?.state %></li>
                  <li><%= addr?.country %></li>
                  <li><%= addr?.pin %></li>
                  <% }) %>
                </ul>
                <!-- <button type="button" onclick="addNewAddress()">Add New Address</button> -->

                <a class="button button--primary button--small" href="/addAddress">
                  Ship to New Address
                </a>

              </section>


              <section class="account-sidebar-block">
                <h3 class="account-heading">Select Payment Method</h3>
                <div class="error-message" id="paymentError"></div>
                <input type="radio" name="paymentMethod" value="COD"> <!-- checked   -->
                Cash on Delivery
                <br>
                <br>
                <input type="radio" name="paymentMethod" value="Online">
                Online Payment
                <br>
                <br>
                <input type="hidden" name="wallet" id="wallet" value="<%= wallet?.walletAmount || 0 %>">
                <input type="radio" name="paymentMethod" value="wallet">
                Wallet ( Availabel Balace: <%= wallet?.walletAmount || 0 %> )
                <!-- Add more payment methods as needed -->
              </section>

              <section class="account-sidebar-block">
                <h3 class="account-heading">Actions</h3>
                <div class="order-details-info">
                  <input type="hidden" name="orderTotal" id="orderTotal" value="<%= cartItems?.reduce((total, item) => total + (item?.quantity * item?.productId?.discountPrice), 0) %>">
                  <input type="hidden" name="discount" id="discount" value=0.00>
                  <input type="submit" class="button button--small" value="Place Order">
                  </form>
                  <% } %>
                </div>
              </section>
            </aside>
            <!-- Coupon -->
            <div class="account-content account-content--fixedSmall">
              <div class="cart-total">
                <div class="cart-total-header">
                  <div class="cart-total-label">
                    Coupon Code:
                  </div>
                  <div class="cart-total-value add">
                    <button class="coupon-code-add">Add Coupon</button>
                    <button class="coupon-code-cancel" style="display: none;">Cancel</button>
                  </div>
                </div>
                <div class="cart-form coupon-code">
                  <label class="form-label" for="couponcode">Enter your coupon code if you have one.</label>
                  <form id="couponForm" class="form form--hiddenLabels coupon-form">
                    <div class="error-message" id="couponError"></div>
                    <!-- <input class="form-input" data-error="Please enter your coupon code."  id="couponCodeInput" type="text" name="couponcode" value="" placeholder="Add Coupon"> -->
                    <select class="form-input" name="couponCode" type="text" placeholder="Select Coupon" id="couponCodeInput">
                      <option value="" selected disabled>Choose Coupon...</option>
                      <% if(coupon?.length > 0) {
                  for(let i=0; i < coupon.length; i++) { %>
                      <option value="<%= coupon[i].couponCode %>"><%= coupon[i]?.couponCode %> <%=coupon[i]?.discountPercentage
                  %></option>
                      <%  } } 
                  else { %> <p>No Coupons To Select</p> <% } %>
                    </select>
                    <input id="totalAmount" name="totalAmount" type="hidden" value="<%= cartItems.reduce((total, item) => total + (item.quantity * item.productId.discountPrice), 0) %>">
                    <br>
                    <br>
                    <button type="submit" class="button button--primary button--small" id="applyCouponBtn">Apply</button>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <% } %>
    </div>
  </main>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<!-- Coupon -->
<script>
  document.getElementById('couponForm').addEventListener('submit', async function(e) {
    e.preventDefault()

    // Clear previous errors
    const errorElements = document.querySelectorAll('.error-message');
    errorElements.forEach(el => el.textContent = '');



    //validate input
    const couponCode = document.getElementById("couponCodeInput").value;

    const totalAmount = document.getElementById('totalAmount').value;

    if (!couponCode) {
      document.getElementById('couponError').innerText = 'Please Select a Coupon Code';
      return
    }

    try {
      const response = await axios.post('/applyCoupon', {
        couponCode,
        totalAmount
      });

      if (response.status === 200) {
        Swal.fire({
          icon: "success",
          title: "Coupon Added Successfully",
          showConfirmButton: false,
          timer: 1500
        });
        document.getElementById('discount-value').innerText = response.data.discount;

        // document.getElementById('subtotal-value').innerText = response.data.newTotal + response.data.discount;
        document.getElementById('grand-total-value').innerText = response.data.grandTotal;

        document.getElementById('orderTotal').value = response.data.grandTotal;
        document.getElementById('discount').value = response.data.discount;
      }
    } catch (error) {
      if (error.response) {
        const {
          status,
          data
        } = error.response;

        if (status === 400 || status === 404 || status === 408 || status === 401) {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message,
            showConfirmButton: true
          });
        }
      } else {
        Swal.fire({
          icon: "error",
          title: "An unexpected error occurred",
          showConfirmButton: false,
          timer: 1000
        });
      }
    }
  });
</script>

<script>
  document.getElementById('makeOrder').addEventListener('submit', async function(event) {
    event.preventDefault();
    // Gather form data
    const productIds = Array.from(document.getElementsByName('productId[]')).map(input => input.value);
    const quantities = Array.from(document.getElementsByName('quantity[]')).map(input => input.value);
    const addressId = document.querySelector('input[name="addressId"]:checked');
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')
    const orderTotal = parseFloat(document.getElementById('orderTotal').value); //Convert to number from string
    const discount = document.getElementById('discount').value;

    const walletAmount = parseFloat(document.getElementById('wallet').value); 
    //cleae previous errors
    document.getElementById('addressError').innerText = '';
    document.getElementById('paymentError').innerText = '';

    let isValid = true
    // Validate form data
    if (!addressId) {
      document.getElementById('addressError').innerText = 'Please select an address.';
      isValid = false
    }

    if (!paymentMethod) {
      document.getElementById('paymentError').innerText = 'Please select a payment method.';
      isValid = false
    }

    if (!isValid) {
      return
    }

    // Prepare data to send
    const orderData = {
      products: productIds.map((productId, index) => ({
        productId: productId,
        quantity: quantities[index]
      })),
      addressId: addressId.value,
      orderTotal: orderTotal,
      discount: discount,
      paymentMethod: paymentMethod.value
    };

    if (orderTotal > walletAmount && orderData.paymentMethod == "wallet") {
   
      console.log("wallet ",walletAmount)
      console.log("type ",typeof walletAmount)
      isValid = false
      Swal.fire({
        icon: 'warning',
        title: "Change Payment Method",
        text: "Your Purchase amount is above wallet Amount, please choose another method",
        showConfirmButton: true
      });

    }

    if (orderTotal > 2500 && orderData.paymentMethod == "COD") {

      isValid = false
      Swal.fire({
        icon: 'warning',
        title: "Payment Needed",
        text: "Your Purchase amount is above 2500 ,you can't choose cash on delivery",
        showConfirmButton: true
      });

    }

    if (!isValid) {
      return
    }

    try {
      const response = await fetch('/makeOrder', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      });

      if (response.ok) {
        // Handle successful response
        const data = await response.json();

        Swal.fire({
          icon: "success",
          title: "Order placed successfully!",
          showConfirmButton: false,
          timer: 1000
        })
        window.location.href = `/orderConfirmation/${data.orderId}`;
      } else if (response.status === 402) { // Online Payment
        Swal.fire({
          icon: 'warning',
          title: 'Payment Required',
          text: 'Please complete your payment via PayPal.',
          showCancelButton: true,
          confirmButtonText: 'Pay with PayPal',
          cancelButtonText: 'Cancel'
        }).then(async (result) => {
          if (result.isConfirmed) {
            // Send order data to the server to create a PayPal order
            const paypalResponse = await fetch('/createPaypalOrder', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                orderData
              }),
            });

            if (paypalResponse.ok) {
              const {
                approval_url
              } = await paypalResponse.json();
              // Redirect to PayPal link
              window.location.href = approval_url;
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Failed to initiate PayPal payment.',
                showConfirmButton: true
              });
            }
          }
        });
      } else {
        const errorData = await response.json();
        // alert('Error placing order: ' + errorData.message);
        Swal.fire({
          icon: 'error',
          title: "Error placing order:  ",
          text: errorData.message,
          showConfirmButton: true
        });
      }
    } catch (error) {
      console.log('Error:', error);
      // alert('Error placing order: ' + errorData.message);
    }
  });
</script>

<!-- succesd faolure in paypal pay  -->
<script>
  // Example function to trigger after PayPal approval
  async function handlePayPalPayment(orderData) {
    // Simulate a payment result using SweetAlert
    Swal.fire({
      title: 'Simulate Payment Result',
      text: 'Choose an option to simulate the payment outcome.',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Success',
      cancelButtonText: 'Fail'
    }).then(async (result) => {
      if (result.isConfirmed) {
        // If user selects success, proceed to capture the payment
        const response = await fetch(`/captureOrder?token=${orderData.token}&PayerID=${orderData.PayerID}`, {
          method: 'GET',
        });

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Payment Successful!',
            showConfirmButton: false,
            timer: 1500
          }).then(() => {
            window.location.href = `/orderConfirmation/${orderData.orderId}`;
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Payment Failed!',
            text: 'There was an issue with capturing the payment.',
            showConfirmButton: true
          });
        }
      } else {
        // If user selects fail, update order status to payment failed
        const response = await fetch('/updateOrderStatus', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            orderId: orderData.orderId,
            status: 'Payment Failed'
          }),
        });

        if (response.ok) {
          Swal.fire({
            icon: 'error',
            title: 'Payment Failed!',
            text: 'Your payment was not successful.',
            showConfirmButton: true
          }).then(() => {
            window.location.href = '/order';
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update order status.',
            showConfirmButton: true
          });
        }
      }
    });
  }
</script>


</body>

</html>