<%- include("../adminPartials/header") %>
<section class="content-main">
  <div class="content-header">
    <div>
      <h2 class="content-title card-title">Order List</h2>
      <!-- <p>Lorem ipsum dolor sit amet.</p> -->
    </div>
    <!-- <div>
      <input type="text" placeholder="Search order ID" class="form-control bg-white" />
    </div> -->
  </div>
  <div class="card mb-4">
    <header class="card-header">
      <!-- <div class="row gx-3">
        <div class="col-lg-4 col-md-6 me-auto">
          <input type="text" placeholder="Search..." class="form-control" />
        </div>
        <div class="col-lg-2 col-6 col-md-3">
          <select class="form-select">
            <option>Status</option>
            <option>Active</option>
            <option>Disabled</option>
            <option>Show all</option>
          </select>
        </div>
        <div class="col-lg-2 col-6 col-md-3">
          <select class="form-select">
            <option>Show 20</option>
            <option>Show 30</option>
            <option>Show 40</option>
          </select>
        </div>
      </div> -->
    </header>
    <% if (message) { %>
    <div id="error-message" class=" text-center font-regular p-2 alert alert-danger " style=" border-radius: 10px; font-size: 18px; width: 100% ; background-color: rgb(248, 151, 151); color: darkred;"><%= message %></div>
    <% } %>
    <% if (success) { %>
    <div id="error-message" class=" text-center font-regular p-2 alert alert-danger " style=" border-radius: 10px; font-size: 18px; width: 100% ; background-color: rgb(248, 151, 151); color: darkgreen;"><%= success %></div>
    <% } %>
    <!-- card-header end// -->
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-hover">
          <thead>
            <tr>
              <th scope="col">S.No</th>
              <th scope="col">Customer Name</th>
              <th scope="col">Email</th>
              <th scope="col">Total</th>
              <th scope="col">Status</th>
              <th scope="col">Date</th>
              <th scope="col" class="text-center">Actions</th>
            </tr>
          </thead>
          <% let SNo = 1; %>
          <tbody>
            <% orders.forEach(order => { %>
            <tr data-order-id="<%= order._id %>" data-order-status="<%= order.status.toLowerCase() %>">
              <td><b><%= SNo++ %></b></td>
              <td><b><%= order?.userId?.name %></b></td>
              <td><%= order?.userId?.email %></td>
              <td><%= order?.orderTotal %></td>
              <td><span class="badge rounded-pill alert-warning"><%= order?.status %></span></td>
              <td><%= new Date(order.createdAt).toDateString() %></td>
              <td>
                <a href="/admin/OrderDetails/<%= order._id %>" class="btn btn-md rounded font-sm">Detail</a>
                <button type="button" onclick="deleteOrder('<%= order?._id %>')" class="btn btn-md rounded text-danger">Delete</button>
                <!-- Actions -->
                <button type="button" id="dropdownMenuButton-<%= order._id %>" class="btn btn-md btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                  Actions
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-<%= order._id %>">
                  <li><a id="orderConfirmedOption-<%= order._id %>" class="dropdown-item change-status" href="#" data-order-id="<%= order._id %>" data-status="Order confirmed">Order Confirmed</a></li>
                  <li><a id="deliveredOption-<%= order._id %>" class="dropdown-item change-status" href="#" data-order-id="<%= order._id %>" data-status="Delivered">Delivered</a></li>
                  <li><a id="completedOption-<%= order._id %>" class="dropdown-item change-status" href="#" data-order-id="<%= order._id %>" data-status="Completed">Completed</a></li>
                  <% if (order.status === 'Requested for Return') { %>
                  <li><a id="approveReturnOption-<%= order._id %>" class="dropdown-item approve-return" href="#" data-order-id="<%= order._id %>">Approve Return</a></li>
                  <li><a id="denyReturnOption-<%= order._id %>" class="dropdown-item deny-return" href="#" data-order-id="<%= order._id %>">Deny Return</a></li>
                  <% } %>
                </ul>
              </td>
            </tr>
            <% }) %>
          </tbody>
        </table>
        

      </div>
      <!-- table-responsive //end -->
    </div>
    <!-- card-body end// -->
  </div>
  <!-- card end// -->
  <div class="row ">
    <div class="col-12 ">
      <nav aria-label="Page navigation example ">
        <ul class="pagination justify-content-center">
          <% if (currentPage > 1) { %>
          <li class="page-item">
            <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
          </li>
          <% } %>
          <% for (let i = 1; i <= totalPages; i++) { %>
          <li class="page-item <%= currentPage === i ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
          </li>
          <% } %>
          <% if (currentPage < totalPages) { %>
          <li class="page-item">
            <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
          </li>
          <% } %>
        </ul>
      </nav>
    </div>
  </div>
</section>
<script>
  async function deleteOrder(orderId) {
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, Delete it!'
    });

    if (result.isConfirmed) {
      const response = await fetch('/admin/deleteOrder/', {
        method: "DELETE",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderId
        })
      });

      const result = await response.json();
      if (response.status === 200) {
        Swal.fire({
          icon: 'success',
          title: 'Order Deleted Successfully',
          showConfirmButton: false,
          timer: 1000
        }).then(() => {
          location.reload();
        })
      } else {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: result.error || "An error occurred While Deleting",
          showConfirmButton: true
        });
      }
    }
  }
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Select all the rows that have an order
  const rows = document.querySelectorAll('tr[data-order-id]');

  // Iterate over each row and handle dropdown options
  rows.forEach(row => {
    const orderId = row.getAttribute('data-order-id');
    const status = row.getAttribute('data-order-status');

    const orderConfirmedOption = document.getElementById(`orderConfirmedOption-${orderId}`);
    const deliveredOption = document.getElementById(`deliveredOption-${orderId}`);
    const completedOption = document.getElementById(`completedOption-${orderId}`);
    const approveReturnOption = document.getElementById(`approveReturnOption-${orderId}`);
    const denyReturnOption = document.getElementById(`denyReturnOption-${orderId}`);
    const dropdownMenuButton = document.getElementById(`dropdownMenuButton-${orderId}`);

    // Hide options initially
    if (orderConfirmedOption) orderConfirmedOption.style.display = 'none';
    if (deliveredOption) deliveredOption.style.display = 'none';
    if (completedOption) completedOption.style.display = 'none';
    if (approveReturnOption) approveReturnOption.style.display = 'none';
    if (denyReturnOption) denyReturnOption.style.display = 'none';

    // Adjust button style for 'Requested for Return'
    const highlightReturnRequest = () => {
      dropdownMenuButton.classList.add('btn-warning');
      dropdownMenuButton.classList.add('text-danger');
      dropdownMenuButton.classList.remove('btn-outline-primary');
    };

    // Disable action button for completed or cancelled orders
    if (status === 'completed' || status === 'cancelled' || status === 'returned') {
      dropdownMenuButton.setAttribute('disabled', true); // Disable the button
      dropdownMenuButton.classList.add('disabled', 'btn-secondary'); // Add disabled class for styling
      dropdownMenuButton.classList.remove('btn-outline-primary'); // Remove the primary styling
    } else {
      // Show/Hide options based on status for other cases
      switch (status) {
        case 'pending':
          if (orderConfirmedOption) orderConfirmedOption.style.display = 'block';
          if (deliveredOption) deliveredOption.style.display = 'block';
          break;
        case 'order confirmed':
          if (deliveredOption) deliveredOption.style.display = 'block';
          if (completedOption) completedOption.style.display = 'block';
          break;
        case 'delivered':
          if (completedOption) completedOption.style.display = 'block';
          break;
        case 'requested for return':
          highlightReturnRequest();
          if (approveReturnOption) approveReturnOption.style.display = 'block';
          if (denyReturnOption) denyReturnOption.style.display = 'block';
          break;
          case 'return denied':
          if (completedOption) completedOption.style.display = 'block';
          break;
        default:
          break;
      }
    }
  });
});

  </script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const orderStatusHeaders = document.querySelectorAll('.status');

    orderStatusHeaders.forEach(function(h5) {
      switch (h5.textContent.trim().toLowerCase()) {
        case 'cancelled':
        case 'returned':
        case 'requested for return':
          h5.style.color = 'red';
          break;
        case 'completed':
          h5.style.color = 'green';
          break;
        case 'order confirmed':
          h5.style.color = 'blue';
          break;
        default:
          h5.style.color = 'black';
          break;
      }
    });
  });

  $(document).ready(function() {
    // Handle the change status action
    $('.change-status').on('click', function(e) {
      e.preventDefault();
      const orderId = $(this).data('order-id');
      const status = $(this).data('status');
      $.ajax({
        url: '/admin/updateOrderStatus',
        type: 'POST',
        data: {
          orderId: orderId,
          status: status
        },
        success: function(response) {
          if (response.success) {
            Swal.fire('Success', 'Order status updated successfully', 'success').then(() => {
              location.reload(); // Reload the page to reflect changes
            });
          } else {
            Swal.fire('Error', 'Failed to update order status', 'error');
          }
        },
        error: function(error) {
          //console.error('Error updating order status:', error);
          Swal.fire('Error', 'Error updating order status', 'error');
        }
      });
    });

    // Handle the approve return action
    $('.approve-return').on('click', function(e) {
      e.preventDefault();
      const orderId = $(this).data('order-id');

      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to approve this return?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, approve it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch('/admin/approveReturn', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                orderId
              }) // Sending orderId in the request body
            })
            .then(response => response.json())
            .then(data => {
              if (data.message) {
                Swal.fire('Approved!', 'Return request has been approved.', 'success').then(() => {
                  location.reload();
                });
              } else {
                Swal.fire('Error!', 'There was a problem approving the return.', 'error');
              }
            })
            .catch(error => {
              Swal.fire('Error!', 'There was a problem approving the return.', 'error');
            });
        }
      });
    });
  });

  // Handle the deny return action
$('.deny-return').on('click', function(e) {
  e.preventDefault();
  const orderId = $(this).data('order-id');

  Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to deny this return?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, deny it!'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch('/admin/denyReturn', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId }) // Sending orderId in the request body
      })
      .then(response => response.json())
      .then(data => {
        if (data.message) {
          Swal.fire('Denied!', 'Return request has been denied.', 'success').then(() => {
            location.reload();
          });
        } else {
          Swal.fire('Error!', 'There was a problem denying the return.', 'error');
        }
      })
      .catch(error => {
        Swal.fire('Error!', 'There was a problem denying the return.', 'error');
      });
    }
  });
});

  // dropdown
  document.addEventListener('DOMContentLoaded', function() {
    // Iterate over each order item
    document.querySelectorAll('.order-row').forEach(row => {
      const status = row.querySelector('.status').innerText.trim().toLowerCase();
      const dropdownItems = row.querySelectorAll('.dropdown-item');

      // Function to disable specific dropdown items
      const disableItems = (items) => {
        items.forEach(item => {
          item.classList.add('disabled');
          item.style.pointerEvents = 'none';
          item.style.color = '#6c757d';
        });
      };

      switch (status) {
        case 'cancelled':
        case 'returned':
        case 'completed':
        case 'requested for return':
          disableItems([dropdownItems[0], dropdownItems[1], dropdownItems[2]]);
          break;
        case 'delivered':
          disableItems([dropdownItems[0]]);
          break;
        default:
          break;
      }
    });
  });
</script>


<%- include("../adminPartials/footer") %><section class="content-main">